{
  "associatedLayout": "Forest",
  "lastChangeTimeStamp": 0,
  "name": "Network Events",
  "events": [
    {
      "type": "BuiltinCommonInstructions::Standard",
      "conditions": [
        {
          "type": {
            "inverted": false,
            "value": "GlobalVariableAsBoolean"
          },
          "parameters": [
            "IsOnline",
            "True"
          ],
          "subInstructions": []
        }
      ],
      "actions": [],
      "events": [
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "folded": true,
          "name": "Watch players",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Watch the players for the current game",
              "comment2": ""
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "GlobalVariableAsBoolean"
                  },
                  "parameters": [
                    "IsFirebaseAuthenticated",
                    "True"
                  ],
                  "subInstructions": []
                },
                {
                  "type": {
                    "inverted": false,
                    "value": "GlobalVariableAsBoolean"
                  },
                  "parameters": [
                    "IsPlayerUpdated",
                    "True"
                  ],
                  "subInstructions": []
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "DepartScene"
                      },
                      "parameters": [
                        ""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Watching players on Firebase.\"",
                        "\"info\"",
                        "\"connection\""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "Firebase::FirestoreStartQuery"
                      },
                      "parameters": [
                        "\"GameQuery\"",
                        "\"Players\""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "Firebase::FirestoreQueryWhereText"
                      },
                      "parameters": [
                        "\"GameQuery\"",
                        "\"GameId\"",
                        "\"==\"",
                        "GlobalVariableString(GameId)"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "Firebase::FirestoreQueryOrderBy"
                      },
                      "parameters": [
                        "\"GamesQuery\"",
                        "\"Id\"",
                        "\"asc\""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "Firebase::FirestoreWatchQuery"
                      },
                      "parameters": [
                        "\"GameQuery\"",
                        "QueryResult",
                        "FirebaseResult"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarSceneTxt"
                      },
                      "parameters": [
                        "FirebaseResult",
                        "=",
                        "\"ok\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Players watched from Firebase.\"",
                        "\"info\"",
                        "\"connection\""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarSceneTxt"
                      },
                      "parameters": [
                        "FirebaseResult",
                        "=",
                        "\"\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarSceneTxt"
                      },
                      "parameters": [
                        "FirebaseResult",
                        "=",
                        "\"error\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Error from Firebase while watching players.\"",
                        "\"error\"",
                        "\"connection\""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarSceneTxt"
                      },
                      "parameters": [
                        "FirebaseResult",
                        "=",
                        "\"\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarSceneTxt"
                      },
                      "parameters": [
                        "QueryResult.empty",
                        "=",
                        "\"false\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VariableClearChildren"
                      },
                      "parameters": [
                        "Players"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::ForEachChildVariable",
                      "iterableVariableName": "QueryResult.docs",
                      "valueIteratorVariableName": "QueryDoc",
                      "keyIteratorVariableName": "",
                      "conditions": [],
                      "actions": [],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::ForEachChildVariable",
                          "iterableVariableName": "QueryDoc",
                          "valueIteratorVariableName": "PlayerDoc",
                          "keyIteratorVariableName": "FieldName",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarSceneTxt"
                              },
                              "parameters": [
                                "QueryDoc.exists",
                                "=",
                                "\"true\""
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarSceneTxt"
                              },
                              "parameters": [
                                "FieldName",
                                "=",
                                "\"data\""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarSceneTxt"
                              },
                              "parameters": [
                                "Player.Id",
                                "=",
                                "VariableString(PlayerDoc.Id)"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarSceneTxt"
                              },
                              "parameters": [
                                "Player.Name",
                                "=",
                                "VariableString(PlayerDoc.Name)"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarSceneTxt"
                              },
                              "parameters": [
                                "Player.Team",
                                "=",
                                "VariableString(PlayerDoc.Team)"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "SceneVariablePush"
                              },
                              "parameters": [
                                "Players",
                                "Player"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "DebuggerTools::ConsoleLog"
                              },
                              "parameters": [
                                "\"Watched player found with id \" + VariableString(Player.Id) + \".\"",
                                "\"info\"",
                                "\"connection\""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarSceneTxt"
                          },
                          "parameters": [
                            "QueryResult.empty",
                            "=",
                            "\"true\""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "VariableClearChildren"
                          },
                          "parameters": [
                            "QueryResult.docs"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "name": "Check messages",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "GlobalVariableAsBoolean"
                  },
                  "parameters": [
                    "IsFirebaseAuthenticated",
                    "True"
                  ],
                  "subInstructions": []
                },
                {
                  "type": {
                    "inverted": false,
                    "value": "GlobalVariableAsBoolean"
                  },
                  "parameters": [
                    "IsPlayerUpdated",
                    "True"
                  ],
                  "subInstructions": []
                },
                {
                  "type": {
                    "inverted": false,
                    "value": "GlobalVariableAsBoolean"
                  },
                  "parameters": [
                    "IsMQTTConnected",
                    "True"
                  ],
                  "subInstructions": []
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Loop through the players array to check messages for each topic",
                  "comment2": ""
                },
                {
                  "type": "BuiltinCommonInstructions::ForEachChildVariable",
                  "iterableVariableName": "Players",
                  "valueIteratorVariableName": "Player",
                  "keyIteratorVariableName": "",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "BuiltinCommonInstructions::CompareStrings"
                      },
                      "parameters": [
                        "VariableString(Player.Id)",
                        "!=",
                        "Firebase::GetUserUID()"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarSceneTxt"
                      },
                      "parameters": [
                        "ControlTopic",
                        "=",
                        "StixExtensions::PlayerTopic(GlobalVariableString(GameId), VariableString(Player.Id), \"controls\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarSceneTxt"
                      },
                      "parameters": [
                        "PositionTopic",
                        "=",
                        "StixExtensions::PlayerTopic(GlobalVariableString(GameId), VariableString(Player.Id), \"position\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarSceneTxt"
                      },
                      "parameters": [
                        "HealthTopic",
                        "=",
                        "StixExtensions::PlayerTopic(GlobalVariableString(GameId), VariableString(Player.Id), \"health\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarSceneTxt"
                      },
                      "parameters": [
                        "DisconnectTopic",
                        "=",
                        "StixExtensions::PlayerTopic(GlobalVariableString(GameId), VariableString(Player.Id), \"disconnect\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetSceneVariableAsBoolean"
                      },
                      "parameters": [
                        "IsSubscribed",
                        "False"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Check to see if we've subscribed to the topics, if not then do so",
                      "comment2": ""
                    },
                    {
                      "type": "BuiltinCommonInstructions::ForEachChildVariable",
                      "iterableVariableName": "SubscribedTopics",
                      "valueIteratorVariableName": "SubscribedTopic",
                      "keyIteratorVariableName": "",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarSceneTxt"
                          },
                          "parameters": [
                            "SubscribedTopic",
                            "=",
                            "VariableString(ControlTopic)"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "SetSceneVariableAsBoolean"
                          },
                          "parameters": [
                            "IsSubscribed",
                            "True"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "SceneVariableAsBoolean"
                          },
                          "parameters": [
                            "IsSubscribed",
                            ""
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "MQTT::subscribe"
                          },
                          "parameters": [
                            "",
                            "VariableString(ControlTopic)",
                            "2",
                            "no",
                            ""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "MQTT::subscribe"
                          },
                          "parameters": [
                            "",
                            "VariableString(PositionTopic)",
                            "0",
                            "no",
                            ""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "MQTT::subscribe"
                          },
                          "parameters": [
                            "",
                            "VariableString(HealthTopic)",
                            "2",
                            "no",
                            ""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "MQTT::subscribe"
                          },
                          "parameters": [
                            "",
                            "VariableString(DisconnectTopic)",
                            "2",
                            "no",
                            ""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "DebuggerTools::ConsoleLog"
                          },
                          "parameters": [
                            "\"Listening to topic: \" + VariableString(ControlTopic) + \".\"",
                            "\"info\"",
                            "\"network\""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarSceneTxt"
                          },
                          "parameters": [
                            "SubscribedTopic",
                            "=",
                            "VariableString(ControlTopic)"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "SceneVariablePush"
                          },
                          "parameters": [
                            "SubscribedTopics",
                            "SubscribedTopic"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    },
                    {
                      "colorB": 228,
                      "colorG": 176,
                      "colorR": 74,
                      "creationTime": 0,
                      "name": "Process Messages",
                      "source": "",
                      "type": "BuiltinCommonInstructions::Group",
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Process messages for controls (e.g. Fire)",
                          "comment2": ""
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "MQTT::onMessage"
                              },
                              "parameters": [
                                "",
                                "VariableString(ControlTopic)",
                                ""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarSceneTxt"
                              },
                              "parameters": [
                                "ReceivedMessage",
                                "=",
                                "MQTT::GetLastMessage(VariableString(ControlTopic))"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "SetSceneVariableAsBoolean"
                              },
                              "parameters": [
                                "IsDelivered",
                                ""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": [
                            {
                              "type": "BuiltinCommonInstructions::ForEach",
                              "object": "StixCharacter",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": true,
                                    "value": "StixExtensions::Character::IsPlayer"
                                  },
                                  "parameters": [
                                    "StixCharacter",
                                    "Character",
                                    ""
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "VarSceneTxt"
                                  },
                                  "parameters": [
                                    "Player.Id",
                                    "=",
                                    "StixCharacter.VariableString(PlayerId)"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "DebuggerTools::ConsoleLog"
                                  },
                                  "parameters": [
                                    "\"Delivering control message: \" + VariableString(ReceivedMessage) + \" to instance \" + ToString(StixCharacter.Variable(InstanceId)) + \".\"",
                                    "\"info\"",
                                    "\"network\""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": [
                                {
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "BuiltinCommonInstructions::CompareStrings"
                                      },
                                      "parameters": [
                                        "VariableString(ReceivedMessage)",
                                        "=",
                                        "\"Fire\""
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "StixExtensions::Weapon::SwingWeapon"
                                      },
                                      "parameters": [
                                        "Weapons",
                                        "Weapon",
                                        "HandheldItem",
                                        "StixCharacter",
                                        ""
                                      ],
                                      "subInstructions": []
                                    },
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "SetSceneVariableAsBoolean"
                                      },
                                      "parameters": [
                                        "IsDelivered",
                                        "True"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                }
                              ]
                            },
                            {
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "SceneVariableAsBoolean"
                                  },
                                  "parameters": [
                                    "IsDelivered",
                                    ""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "DebuggerTools::ConsoleLog"
                                  },
                                  "parameters": [
                                    "\"Failed to deliver control message: \" + VariableString(ReceivedMessage) + \". No Stix instance found.\"",
                                    "\"error\"",
                                    "\"network\""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            }
                          ]
                        },
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Process messages for position syncing updates",
                          "comment2": ""
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "MQTT::onMessage"
                              },
                              "parameters": [
                                "",
                                "VariableString(PositionTopic)",
                                ""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarSceneTxt"
                              },
                              "parameters": [
                                "ReceivedMessage",
                                "=",
                                "MQTT::GetLastMessage(VariableString(PositionTopic))"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "ArrayTools::SplitString"
                              },
                              "parameters": [
                                "",
                                "\"ReceivedMessage\"",
                                "\",\"",
                                "\"SplitMessage\"",
                                ""
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "SetSceneVariableAsBoolean"
                              },
                              "parameters": [
                                "IsDelivered",
                                ""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": [
                            {
                              "type": "BuiltinCommonInstructions::ForEach",
                              "object": "StixCharacter",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": true,
                                    "value": "StixExtensions::Character::IsPlayer"
                                  },
                                  "parameters": [
                                    "StixCharacter",
                                    "Character",
                                    ""
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "VarSceneTxt"
                                  },
                                  "parameters": [
                                    "Player.Id",
                                    "=",
                                    "StixCharacter.VariableString(PlayerId)"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "DebuggerTools::ConsoleLog"
                                  },
                                  "parameters": [
                                    "\"Delivering position message: \" + VariableString(ReceivedMessage) + \" to instance \" + ToString(StixCharacter.Variable(InstanceId)) + \".\"",
                                    "\"info\"",
                                    "\"network\""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": [
                                {
                                  "type": "BuiltinCommonInstructions::ForEach",
                                  "object": "StixCharacterHitBox",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "StixExtensions::Character::IsHitBoxMatch"
                                      },
                                      "parameters": [
                                        "StixCharacter",
                                        "Character",
                                        "StixCharacterHitBox",
                                        ""
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "MettreXY"
                                      },
                                      "parameters": [
                                        "StixCharacterHitBox",
                                        "=",
                                        "ToNumber(VariableString(SplitMessage[0]))",
                                        "=",
                                        "ToNumber(VariableString(SplitMessage[1]))"
                                      ],
                                      "subInstructions": []
                                    },
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "SetSceneVariableAsBoolean"
                                      },
                                      "parameters": [
                                        "IsDelivered",
                                        "True"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                }
                              ]
                            },
                            {
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "SceneVariableAsBoolean"
                                  },
                                  "parameters": [
                                    "IsDelivered",
                                    ""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "DebuggerTools::ConsoleLog"
                                  },
                                  "parameters": [
                                    "\"Failed to deliver position message: \" + VariableString(ReceivedMessage) + \". No Stix instance found.\"",
                                    "\"error\"",
                                    "\"network\""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            }
                          ]
                        },
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Process messages for health syncing updates",
                          "comment2": ""
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "MQTT::onMessage"
                              },
                              "parameters": [
                                "",
                                "VariableString(HealthTopic)",
                                ""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarSceneTxt"
                              },
                              "parameters": [
                                "ReceivedMessage",
                                "=",
                                "MQTT::GetLastMessage(VariableString(HealthTopic))"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "SetSceneVariableAsBoolean"
                              },
                              "parameters": [
                                "IsDelivered",
                                ""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": [
                            {
                              "type": "BuiltinCommonInstructions::ForEach",
                              "object": "StixCharacter",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": true,
                                    "value": "StixExtensions::Character::IsPlayer"
                                  },
                                  "parameters": [
                                    "StixCharacter",
                                    "Character",
                                    ""
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "VarSceneTxt"
                                  },
                                  "parameters": [
                                    "Player.Id",
                                    "=",
                                    "StixCharacter.VariableString(PlayerId)"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "DebuggerTools::ConsoleLog"
                                  },
                                  "parameters": [
                                    "\"Delivering health message: \" + VariableString(ReceivedMessage) + \" to instance \" + ToString(StixCharacter.Variable(InstanceId)) + \".\"",
                                    "\"info\"",
                                    "\"network\""
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarObjet"
                                  },
                                  "parameters": [
                                    "StixCharacter",
                                    "Health",
                                    "=",
                                    "ToNumber(VariableString(ReceivedMessage))"
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "SetSceneVariableAsBoolean"
                                  },
                                  "parameters": [
                                    "IsDelivered",
                                    "True"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            },
                            {
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "SceneVariableAsBoolean"
                                  },
                                  "parameters": [
                                    "IsDelivered",
                                    ""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "DebuggerTools::ConsoleLog"
                                  },
                                  "parameters": [
                                    "\"Failed to deliver health message: \" + VariableString(ReceivedMessage) + \". No Stix instance found.\"",
                                    "\"error\"",
                                    "\"network\""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            }
                          ]
                        },
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Process messages for disconnections",
                          "comment2": ""
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "MQTT::onMessage"
                              },
                              "parameters": [
                                "",
                                "VariableString(DisconnectTopic)",
                                ""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "DebuggerTools::ConsoleLog"
                              },
                              "parameters": [
                                "\"Removing player \" + VariableString(Player.Id) + \" from game.\"",
                                "\"info\"",
                                "\"network\""
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "Firebase::FirestoreUpdateField"
                              },
                              "parameters": [
                                "\"Players\"",
                                "VariableString(Player.Id)",
                                "\"GameId\"",
                                "\"\"",
                                ""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": [
                            {
                              "type": "BuiltinCommonInstructions::ForEach",
                              "object": "StixCharacter",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": true,
                                    "value": "StixExtensions::Character::IsPlayer"
                                  },
                                  "parameters": [
                                    "StixCharacter",
                                    "Character",
                                    ""
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "VarSceneTxt"
                                  },
                                  "parameters": [
                                    "Player.Id",
                                    "=",
                                    "StixCharacter.VariableString(PlayerId)"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "DebuggerTools::ConsoleLog"
                                  },
                                  "parameters": [
                                    "\"Disconnecting player \" + VariableString(Player.Id) + \" and instance \" + ToString(StixCharacter.Variable(InstanceId)) + \".\"",
                                    "\"info\"",
                                    "\"network\""
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarObjetTxt"
                                  },
                                  "parameters": [
                                    "StixCharacter",
                                    "PlayerId",
                                    "=",
                                    "\"\""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": [
                                {
                                  "type": "BuiltinCommonInstructions::ForEach",
                                  "object": "StixCharacterHitBox",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "StixExtensions::Character::IsHitBoxMatch"
                                      },
                                      "parameters": [
                                        "StixCharacter",
                                        "Character",
                                        "StixCharacterHitBox",
                                        ""
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "SetCenter"
                                      },
                                      "parameters": [
                                        "StixCharacterHitBox",
                                        "=",
                                        "StagingPoint.CenterX()",
                                        "=",
                                        "StagingPoint.CenterY()"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "parameters": []
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": []
        }
      ]
    }
  ]
}